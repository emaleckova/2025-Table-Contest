```{r}
#| echo: false

source("_setup.R")
source("_objects.R")
```


# `{ggplot2}` and `{gt}` assembly {#sec-ggplot-assembly}

When creating a series of outputs, it is desirable to keep them visually unified. Is it possible to combine plots and tables in a single figure? Yes, it is - including tables produced with the `{gt}` package. We will only need a small trick to convert a `gt` table to a _grob_, which we can then combine with a plot created with the famous `{ggplot2}` package.

**1. Make a plot**  

Here, we will create a simple violin plot to visualize the distribution of measured Î´^13^C across countries in this data set.

```{r}
#| label: simple-violin-plot

p_violin <- ggplot(dat_vegetation, aes(x = country_label, y = delta)) +
  geom_violin(colour = "black", fill = "#005C55FF") +
  theme_classic() +
  theme(
    plot.margin = margin(0, 0, 0, 0),
    plot.background = element_blank(),
    panel.background = element_blank(),
    axis.line.x = element_blank(),
    axis.line.y = element_line(colour = "black", linewidth = 0.75),
    axis.ticks.y = element_line(colour = "black", linewidth = 0.75),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_text(colour = "black", size = 17),
    axis.title = element_blank(),
    aspect.ratio = 0.75
  )
```

```{r}
#| label: fig-violin
#| fig-width: 4.5
#| echo: false

p_violin
```

**2. Make a `gt` table**

```{r}
#| label: gt-for-figure

gt_for_plot <- dat_vegetation |>
  group_by(country) |>
  summarize(
    mean_d = mean(delta),
    median_d = median(delta)
  ) |>
  gt() |>
  tab_spanner(columns = contains("_d"), label = md("&delta;^13^C")) |>
  cols_label(
    country = "Country",
    mean_d = "Mean",
    median_d = "Median"
  ) |>
  # column labels and spanners in bold font face
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_spanners(spanners = everything())
  )
```

```{r}
#| label: tbl-gt-for-figure
#| echo: false

gt_for_plot
```

**3. Convert `gt` table to a _grob_ (required by `{patchwork}`), which requires new dependencies:**

```{r}
library(magick)
library(ggplotify)
```

With a small function, we can first save the `gt` table as an `PNG` image and with help of the `{ggplotify}`, further conversion into a _grob_ is possible:

```{r}
#| fxn-gt-to-grob

as_grob_gt <- function(x) {
  tmp <- tempfile(fileext = ".png")
  gtsave(x, filename = tmp)
  img <- magick::image_read(tmp)
  
  # Returns a ggplot grob for patchwork
  return(ggplotify::as.grob(img)) 
}
```

**4. Assemble plot and table into a single figure**

As mentioned above, we will use the `{patchwork}` package for a final plot-table assembly.

```{r}
library(patchwork)
```


Once `gt` table is converted to a _grob_

```{r}
#| label: gt-to-grob

gt_grob_patchwork <- as_grob_gt(gt_for_plot)
```

we can treat it as _e.g._, another `ggplot2` figure and with help of `{patchwork}`'s syntax, control relative positions of plot and table as well as their alignment

```{r}
#| label: fig-assembly
#| fig-width: 11
#| fig-asp: 0.75

p_violin / gt_grob_patchwork
```

