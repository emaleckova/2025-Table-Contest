---
title: "Untitled"
format: html
---


```{r}
#| label: session-setup

# Data source
library(folio)

# Maps
library(terra)
library(geodata)

# Data wrangling
library(dplyr)

# Visualization
library(gt)
```

```{r}
#| label: load-data

dat_vegetation <- folio::vegetation
```

# Motivation

I am making this tutorial for six year younger me. I was in the second year of graduate school, working on my first manuscripts and gaining first experiences with `R`, specifically analysis of RNA-sequencing data and making first visualizations with the `{ggplot2}`. While it felt natural to create figures programatically, I never considered this option for tables. And my mindset did not change two years later when writing my thesis. Over the past year, I have started to use the `{gt}` package and can say: Who wants reproducible, well-documented work should create also tables programatically. My aim is to show that this is possible and that the `{gt}` package has got all basic formatting options (and many I probably still do not know about) covered.

# Introduction
Tables can serve different purposes: they can represent a full record of raw data (*e.g.*, measurements as in the `vegetation` dataset used in this tutorial) which comes as an appendix of a scientific manuscript, tables can be a stand-alone summary of the data, or a complementary piece of information alongside a chart. In this tutorial, we will generate an example of each, starting from the same input data.

In  larger projects - *e.g.*, a scientific manuscript, a conference poster, or a report which belongs to a series of reports - it is desirable to use common visual elements, such as font family or institution colours. This will be considered when generating individual examples.

**Data**
`vegetation` dataset available via the `{folio}` package
Original publication: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


# Definition of visual elements

```{r}
#| label: common-visuals

paper_gt_theme <- function(gt_table) {
  gt_table |> 
    # overall aspects such as font and padding
    tab_options(
      data_row.padding = px(6),
      heading.align = "center",
      heading.title.font.size = px(26),
      heading.subtitle.font.size = px(14),
      table_body.hlines.width = px(0)
    ) |> 
    # column labels and spanners in bold fontface
    tab_style(
        style = cell_text(weight = "bold"),
        locations = cells_column_labels(everything())
    ) |> 
    tab_style(
        style = cell_text(weight = "bold"),
        locations = cells_column_spanners(spanners = everything())
    )      
    # font family
}
```

# Scientific notions
Units, superscripts, correct use of italics in species names. `{gt}` is fully compatible with markdown syntax and we will take advantage of it. We need to prepare the following:

- vs
- b
- ebwr

# Creation of a summary table


By family and country
```{r}
#| label: summarize-by-family-country

veg_summarized <- dat_vegetation |> 
    group_by(family, country, type) |>
    summarize(
        n_plants = n(),
        mean_d = mean(delta),
        sd_d = sd(delta),
        ) |> 
    ungroup()
```

## Minimal publication design

```{r}
#| label: tbl-publication-ready
#| tbl-cap: Mean delta 13 C values for selected C3 and C4 plant families

veg_summarized |> 
    # html for subscript in C3, C4
    mutate(type = case_when(
        type == "C3" ~ "C<sub>3</sub>",
        type == "C4" ~ "C<sub>4</sub>",
        TRUE ~ type
    )) |> 
    gt() |>
    # this is only a helper column used for conditional formatting and it should not be displayed in the final table
    cols_hide("n_plants") |>
    # replace default NA values with a "-"
    # Note: modifying the data with {dplyr} functions would work equally well but {gt} has a devoted function for this purpose
    sub_missing(columns = "sd_d", missing_text = "-") |>
    tab_style(style = list(
        cell_text(style = "italic")),
    # family names in italics
    locations = cells_body(columns = "family")
    ) |> 
    # families with less than three measurements in grey
    tab_style(style = list(
        cell_text(color = "grey50")
    ),
    locations = cells_body(columns = everything(),
    rows = n_plants < 3)
    ) |> 
    # ^13^ is markdown for superscript, &delta is html for lower case Greek delta
    tab_spanner(columns = contains("_d"), label = md("&delta;^13^C")) |> 
    cols_label(
        family = "Family",
        country = "Country",
        type = "Type",
        mean_d = "Mean", 
        sd_d = "SD"
    ) |> 
    fmt_markdown(columns = c("type", "mean_d")) |> 
    fmt_number(columns = c("mean_d", "sd_d"), decimals = 2) |> 
    # basic formatting with the customized theme
    # Note: order matters here - the custom theme defines formatting for column spanners and it must be used only after a (all) spanner(s) were created
    paper_gt_theme() |> 
    # conditional formatting was introduced and it should be explained - a table footnote is a good place to do so
    tab_footnote(footnote = "Families which have less than three measurements are greyed out.")
```

## Advanced design for stand-alone use
We want to catch attention, therefore we want to use more colours and we can also provide more details - *e.g.*, we can highlight countries in continent shapes.

```{r}
#| label: generate-continent-shapes


```

```{r}
#| label: highlight-countries-in-continent-shapes
```

### Interactive version
Maybe you want to draw attention to results of your project or an upcoming presentation. Social media are powerful and an interactive table might be a good option, for example on an institution website.

Sorting, search function

# Creation of an appendix table

Add ID to differentiate multiple specimens of the same species + location


```{r}

```


# Resources

Besides package documentation, I found the following resources useful:
- [https://rfortherestofus.com/2023/08/table-theme-gt](https://rfortherestofus.com/2023/08/table-theme-gt)  
- [https://www.r-bloggers.com/2023/03/getting-continent-mainland-and-island-maps-in-r/](https://www.r-bloggers.com/2023/03/getting-continent-mainland-and-island-maps-in-r/)  
