[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "{gt} tables for scientific projects",
    "section": "",
    "text": "0.1 The Table Contest\nThe Table Contest by Posit is an annual event and this book is a tutorial contribution for the 2025 edition.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>The Table Contest</span>"
    ]
  },
  {
    "objectID": "01-Getting_started.html",
    "href": "01-Getting_started.html",
    "title": "2  Getting started",
    "section": "",
    "text": "We need access to required packages and obviously to the data with will further work with. I like to load all packages right at beginning of the document for a convenient overview of all required dependencies. I will point out some of the packages when we need them later.\n\n\nShow code\n# Data source\nlibrary(folio)\n\n# Maps\nlibrary(rnaturalearth)\n\n# Data wrangling, functional programming functions\nlibrary(dplyr)\nlibrary(purrr)\n\n# Visualization\nlibrary(gt)\nlibrary(ggplot2)\nlibrary(showtext)\nlibrary(see) # half-violin plots\nlibrary(ggiraph)\nlibrary(htmltools)\n\n# plot-table assembly\nlibrary(magick)\nlibrary(webshot2)\nlibrary(ggplotify)\nlibrary(patchwork)\n\n# Table export\nlibrary(openxlsx2)\n\n\nAfter loading the data, some preprocessing will be handy to avoid troubles and repetitive handling of the issues again and again. For example, in ?sec-advanced-design we will draw in earth map data to visualize countries. It turnes out that the {rnaturalearth} packages which is a common source of geographical data refers to Democratic Republic of the Congo, while the authors of the original publication use older name Zaire. Besides making this fix, we will also introduce an abbreviated version of the current country’s name to save some space in plot titles (also relevant in ?sec-advanced-design). We will also introduce C&lt;sub&gt;3&lt;/sub&gt; and C&lt;sub&gt;4&lt;/sub&gt; in the type column to set us for a nicely formatted spelling throughout all tables.\n\n\nShow code\nraw_dat_vegetation &lt;- folio::vegetation\n\n# Zaire was renamed in 1997\ndat_vegetation &lt;- raw_dat_vegetation |&gt;\n  mutate(\n    country_label = case_when(\n      country == \"Zaire\" ~ \"Dem. Rep. of Congo\",\n      TRUE ~ country\n    ),\n    country = case_when(\n      country == \"Zaire\" ~ \"Democratic Republic of the Congo\",\n      TRUE ~ country\n    )\n  ) |&gt; \n  # html for subscript in C3, C4\n  mutate(type = case_when(\n    type == \"C3\" ~ \"C&lt;sub&gt;3&lt;/sub&gt;\",\n    type == \"C4\" ~ \"C&lt;sub&gt;4&lt;/sub&gt;\",\n    TRUE ~ type\n  ))\n\n\nIn some of the tables, we will refer to the data source in the table’s footnote and we thus create a reusable footnote label early on. Note markdown syntax for bold and monospace text:\n\n\nShow code\n# Data source footnote\nfolio_footnote &lt;- \"**Data source:** `vegetation` data from the `{folio}` package\"",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "02-Publication_table.html",
    "href": "02-Publication_table.html",
    "title": "3  Publication design",
    "section": "",
    "text": "3.1 Simplest table\nTables are common is scientific publications but usually rather minimalist design is preferred. Such tables are not only easy to read but also easy to create with the {gt} package - a perfect occasion for the first table of this tutorial. For the demonstration purposes, we will summarize δ13C measurement by families and countries.\nDisplaying a data frame as a gt table is a straightforward process and the default design is pleasing. However, our table will require some additional formatting to satisfy taxonomical and scietific conventions given by the data.\ntbl_plain &lt;- veg_summarized |&gt; \n    gt()\n\ntbl_plain\n\n\n\n\n\n\n\nfamily\ncountry\ntype\nn_plants\nmean_d\nsd_d\n\n\n\n\nAcanthaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-27.00000\nNA\n\n\nAmaranthaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-29.90000\nNA\n\n\nAsclepiadaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.10000\nNA\n\n\nBalinitaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-28.60000\n0.8485281\n\n\nBignoniaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.90000\nNA\n\n\nBoraginaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-25.50000\n0.8485281\n\n\nBurseraceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n3\n-28.70000\n1.9157244\n\n\nCaesalpiniaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-32.35000\n1.9091883\n\n\nCapparaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n4\n-27.67500\n2.2276669\n\n\nCombretaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-25.90000\nNA\n\n\nConnaraceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-34.50000\nNA\n\n\nCucurbitaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-27.50000\nNA\n\n\nCyperaceae\nMongolia\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-27.60000\nNA\n\n\nEbenaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-32.10000\nNA\n\n\nEuphorbiaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-33.40000\nNA\n\n\nEuphorbiaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-27.25000\n0.2121320\n\n\nFlacourtiaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-34.85000\n0.7778175\n\n\nFlacourtiaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-26.30000\nNA\n\n\nGramineae\nArgentina\nC&lt;sub&gt;3&lt;/sub&gt;\n24\n-27.61667\n1.8438303\n\n\nGramineae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-32.20000\nNA\n\n\nGramineae\nKenya\nC&lt;sub&gt;4&lt;/sub&gt;\n55\n-12.10545\n1.0700326\n\n\nGramineae\nMongolia\nC&lt;sub&gt;3&lt;/sub&gt;\n5\n-24.82000\n1.6006249\n\n\nLabiatae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.30000\nNA\n\n\nLeguminosae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n16\n-27.03125\n1.6886755\n\n\nMalvaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-26.85000\n1.7677670\n\n\nMaranthaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-36.35000\n0.2121320\n\n\nPalmae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-25.90000\n1.5556349\n\n\nPapilionaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.60000\nNA\n\n\nPedaliaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.10000\nNA\n\n\nRhamnaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-27.40000\n1.9798990\n\n\nRubiaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-33.00000\nNA\n\n\nRubiaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-27.90000\nNA\n\n\nSalvadoraceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n6\n-27.15000\n1.3546217\n\n\nSolanaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n2\n-27.50000\n0.5656854\n\n\nSterculiaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-36.00000\nNA\n\n\nTiliaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-27.50000\nNA\n\n\nUrticaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-34.90000\nNA\n\n\nUrticaceae\nKenya\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-28.20000\nNA\n\n\nViolaceae\nDemocratic Republic of the Congo\nC&lt;sub&gt;3&lt;/sub&gt;\n1\n-34.40000\nNA",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication design</span>"
    ]
  },
  {
    "objectID": "02-Publication_table.html#scientific-and-other-formatting",
    "href": "02-Publication_table.html#scientific-and-other-formatting",
    "title": "3  Publication design",
    "section": "3.2 Scientific and other formatting",
    "text": "3.2 Scientific and other formatting\nWe will choose if there are any columns we would like to hide - here the n_plants which we introduced as helper column to control conditional formatting (in Section 3.4). We take advantage of sub_missing() function which helps us to handle missing values (NAs) according to our preference without the need to modify the input data directly or by introducing a helper column.\nWith tab_style() we can easily italicize an entire column and with cols_label() we can turn existing variable names into a meaningful and appealing column labels. When setting up a spanner over the numerical columns, we use markdown to achieve proper formatting. fmt_number() makes common number formatting options a simple task - we use to control number of decimal places.\n\n\nShow code\ntbl_formatted &lt;- tbl_plain |&gt;\n    # this is only a helper column used for conditional formatting and it should not be displayed in the final table\n    cols_hide(\"n_plants\") |&gt;\n    # replace default NA values with a \"-\"\n    # Note: modifying the data with {dplyr} functions would work equally well but {gt} has a devoted function for this purpose\n    sub_missing(columns = \"sd_d\", missing_text = \"-\") |&gt;\n    tab_style(style = list(\n        cell_text(style = \"italic\")),\n    # family names in italics\n    locations = cells_body(columns = \"family\")\n    ) |&gt; \n    # ^13^ is markdown for superscript, &delta is html for lower case Greek delta\n    tab_spanner(columns = contains(\"_d\"), label = md(\"&delta;^13^C\")) |&gt; \n    cols_label(\n        family = \"Family\",\n        country = \"Country\",\n        type = \"Type\",\n        mean_d = \"Mean\", \n        sd_d = \"SD\"\n    ) |&gt; \n    fmt_markdown(columns = c(\"type\")) |&gt; \n    fmt_number(columns = c(\"mean_d\", \"sd_d\"), decimals = 2) |&gt; \n    # basic formatting with the customized theme\n    # Note: order matters here - the custom theme defines formatting for column spanners and it must be used only after a (all) spanner(s) were created\n  cols_width(matches(\"family\") ~ px(150),\n             matches(\"country\") ~ px(250),\n             everything() ~ px(100))\n\ntbl_formatted\n\n\n\n\n\n\n\n\nFamily\nCountry\nType\n\nδ13C\n\n\n\nMean\nSD\n\n\n\n\nAcanthaceae\nKenya\nC3\n−27.00\n-\n\n\nAmaranthaceae\nKenya\nC3\n−29.90\n-\n\n\nAsclepiadaceae\nKenya\nC3\n−28.10\n-\n\n\nBalinitaceae\nKenya\nC3\n−28.60\n0.85\n\n\nBignoniaceae\nKenya\nC3\n−28.90\n-\n\n\nBoraginaceae\nKenya\nC3\n−25.50\n0.85\n\n\nBurseraceae\nKenya\nC3\n−28.70\n1.92\n\n\nCaesalpiniaceae\nDemocratic Republic of the Congo\nC3\n−32.35\n1.91\n\n\nCapparaceae\nKenya\nC3\n−27.68\n2.23\n\n\nCombretaceae\nKenya\nC3\n−25.90\n-\n\n\nConnaraceae\nDemocratic Republic of the Congo\nC3\n−34.50\n-\n\n\nCucurbitaceae\nKenya\nC3\n−27.50\n-\n\n\nCyperaceae\nMongolia\nC3\n−27.60\n-\n\n\nEbenaceae\nDemocratic Republic of the Congo\nC3\n−32.10\n-\n\n\nEuphorbiaceae\nDemocratic Republic of the Congo\nC3\n−33.40\n-\n\n\nEuphorbiaceae\nKenya\nC3\n−27.25\n0.21\n\n\nFlacourtiaceae\nDemocratic Republic of the Congo\nC3\n−34.85\n0.78\n\n\nFlacourtiaceae\nKenya\nC3\n−26.30\n-\n\n\nGramineae\nArgentina\nC3\n−27.62\n1.84\n\n\nGramineae\nDemocratic Republic of the Congo\nC3\n−32.20\n-\n\n\nGramineae\nKenya\nC4\n−12.11\n1.07\n\n\nGramineae\nMongolia\nC3\n−24.82\n1.60\n\n\nLabiatae\nKenya\nC3\n−28.30\n-\n\n\nLeguminosae\nKenya\nC3\n−27.03\n1.69\n\n\nMalvaceae\nKenya\nC3\n−26.85\n1.77\n\n\nMaranthaceae\nDemocratic Republic of the Congo\nC3\n−36.35\n0.21\n\n\nPalmae\nKenya\nC3\n−25.90\n1.56\n\n\nPapilionaceae\nKenya\nC3\n−28.60\n-\n\n\nPedaliaceae\nKenya\nC3\n−28.10\n-\n\n\nRhamnaceae\nKenya\nC3\n−27.40\n1.98\n\n\nRubiaceae\nDemocratic Republic of the Congo\nC3\n−33.00\n-\n\n\nRubiaceae\nKenya\nC3\n−27.90\n-\n\n\nSalvadoraceae\nKenya\nC3\n−27.15\n1.35\n\n\nSolanaceae\nKenya\nC3\n−27.50\n0.57\n\n\nSterculiaceae\nDemocratic Republic of the Congo\nC3\n−36.00\n-\n\n\nTiliaceae\nKenya\nC3\n−27.50\n-\n\n\nUrticaceae\nDemocratic Republic of the Congo\nC3\n−34.90\n-\n\n\nUrticaceae\nKenya\nC3\n−28.20\n-\n\n\nViolaceae\nDemocratic Republic of the Congo\nC3\n−34.40\n-",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication design</span>"
    ]
  },
  {
    "objectID": "02-Publication_table.html#custom-theme",
    "href": "02-Publication_table.html#custom-theme",
    "title": "3  Publication design",
    "section": "3.3 Custom theme",
    "text": "3.3 Custom theme\nA publication may contain multiple figures. Instead of repeating the same code again and potentially making the same adjustments at multiple places if we decide to make changes to the table design, we can define a custom theme once. We use {gt} function and formatting options as with a regular table but wrap all of our code into a function. In our theme, we will define font family and size for individual components of the table. We will also ensure that column headings are displayed in bold font face.\n\n\nShow code\npaper_gt_theme &lt;- function(gt_table) {\n  gt_table |&gt; \n    # overall aspects such as font and padding\n    tab_options(\n      table.font.names = \"Times New Roman\",\n      data_row.padding = px(6),\n      heading.align = \"center\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(14),\n      table_body.hlines.width = px(0)\n    ) |&gt; \n    # column labels and spanners in bold font face\n    tab_style(\n        style = cell_text(weight = \"bold\"),\n        locations = cells_column_labels(everything())\n    ) |&gt; \n    tab_style(\n        style = cell_text(weight = \"bold\"),\n        locations = cells_column_spanners(spanners = everything())\n    )      \n}\n\n\n\n\n\n\n\n\nCustom theme placement\n\n\n\nThe custom scheme contains formatting options for column spanners and the theme definition must thus come only once spanner were defined. In other case, they will remain unaffected by the custom theme.\n\n\n\n\nShow code\ntbl_formatted |&gt;\n  paper_gt_theme()\n\n\n\n\n\n\n\n\nFamily\nCountry\nType\n\nδ13C\n\n\n\nMean\nSD\n\n\n\n\nAcanthaceae\nKenya\nC3\n−27.00\n-\n\n\nAmaranthaceae\nKenya\nC3\n−29.90\n-\n\n\nAsclepiadaceae\nKenya\nC3\n−28.10\n-\n\n\nBalinitaceae\nKenya\nC3\n−28.60\n0.85\n\n\nBignoniaceae\nKenya\nC3\n−28.90\n-\n\n\nBoraginaceae\nKenya\nC3\n−25.50\n0.85\n\n\nBurseraceae\nKenya\nC3\n−28.70\n1.92\n\n\nCaesalpiniaceae\nDemocratic Republic of the Congo\nC3\n−32.35\n1.91\n\n\nCapparaceae\nKenya\nC3\n−27.68\n2.23\n\n\nCombretaceae\nKenya\nC3\n−25.90\n-\n\n\nConnaraceae\nDemocratic Republic of the Congo\nC3\n−34.50\n-\n\n\nCucurbitaceae\nKenya\nC3\n−27.50\n-\n\n\nCyperaceae\nMongolia\nC3\n−27.60\n-\n\n\nEbenaceae\nDemocratic Republic of the Congo\nC3\n−32.10\n-\n\n\nEuphorbiaceae\nDemocratic Republic of the Congo\nC3\n−33.40\n-\n\n\nEuphorbiaceae\nKenya\nC3\n−27.25\n0.21\n\n\nFlacourtiaceae\nDemocratic Republic of the Congo\nC3\n−34.85\n0.78\n\n\nFlacourtiaceae\nKenya\nC3\n−26.30\n-\n\n\nGramineae\nArgentina\nC3\n−27.62\n1.84\n\n\nGramineae\nDemocratic Republic of the Congo\nC3\n−32.20\n-\n\n\nGramineae\nKenya\nC4\n−12.11\n1.07\n\n\nGramineae\nMongolia\nC3\n−24.82\n1.60\n\n\nLabiatae\nKenya\nC3\n−28.30\n-\n\n\nLeguminosae\nKenya\nC3\n−27.03\n1.69\n\n\nMalvaceae\nKenya\nC3\n−26.85\n1.77\n\n\nMaranthaceae\nDemocratic Republic of the Congo\nC3\n−36.35\n0.21\n\n\nPalmae\nKenya\nC3\n−25.90\n1.56\n\n\nPapilionaceae\nKenya\nC3\n−28.60\n-\n\n\nPedaliaceae\nKenya\nC3\n−28.10\n-\n\n\nRhamnaceae\nKenya\nC3\n−27.40\n1.98\n\n\nRubiaceae\nDemocratic Republic of the Congo\nC3\n−33.00\n-\n\n\nRubiaceae\nKenya\nC3\n−27.90\n-\n\n\nSalvadoraceae\nKenya\nC3\n−27.15\n1.35\n\n\nSolanaceae\nKenya\nC3\n−27.50\n0.57\n\n\nSterculiaceae\nDemocratic Republic of the Congo\nC3\n−36.00\n-\n\n\nTiliaceae\nKenya\nC3\n−27.50\n-\n\n\nUrticaceae\nDemocratic Republic of the Congo\nC3\n−34.90\n-\n\n\nUrticaceae\nKenya\nC3\n−28.20\n-\n\n\nViolaceae\nDemocratic Republic of the Congo\nC3\n−34.40\n-",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication design</span>"
    ]
  },
  {
    "objectID": "02-Publication_table.html#sec-conditional-rows",
    "href": "02-Publication_table.html#sec-conditional-rows",
    "title": "3  Publication design",
    "section": "3.4 Conditional row formatting",
    "text": "3.4 Conditional row formatting\nWe take the existing, formatted table a little further. In some families, the number of measured species was low and we will use this information for conditional formatting of the affected rows. We will also include a table footnote to explain the formatting right in place.\nWe stored the previous table as a gt table and we will take advantage of it. We can add additional formatting options to existing gt object which is more elegant and less error-prone than copy-pasting of longer pieces of code.\nWe take advantage of n_plants “helper column” to grey out families with less than three measurements, with tab_footnote() we can easily provide more details about meaning of the formatting options.\n\n\nShow code\ntbl_publication_conditional &lt;- tbl_formatted |&gt;\n  paper_gt_theme() |&gt;\n  # families with less than three measurements in grey\n  tab_style(style = list(\n    cell_text(color = \"grey50\")\n    ),\n    locations = cells_body(columns = everything(),\n                           rows = n_plants &lt; 3)\n    ) |&gt; \n  # conditional formatting was introduced and it should be explained - a table footnote is a good place to do so\n  tab_footnote(footnote = md(paste(folio_footnote, \"&lt;br&gt;\", \n                                   \"Families which have less than three measurements are greyed out.\")))\n\ntbl_publication_conditional \n\n\n\n\n\n\n\n\nFamily\nCountry\nType\n\nδ13C\n\n\n\nMean\nSD\n\n\n\n\nAcanthaceae\nKenya\nC3\n−27.00\n-\n\n\nAmaranthaceae\nKenya\nC3\n−29.90\n-\n\n\nAsclepiadaceae\nKenya\nC3\n−28.10\n-\n\n\nBalinitaceae\nKenya\nC3\n−28.60\n0.85\n\n\nBignoniaceae\nKenya\nC3\n−28.90\n-\n\n\nBoraginaceae\nKenya\nC3\n−25.50\n0.85\n\n\nBurseraceae\nKenya\nC3\n−28.70\n1.92\n\n\nCaesalpiniaceae\nDemocratic Republic of the Congo\nC3\n−32.35\n1.91\n\n\nCapparaceae\nKenya\nC3\n−27.68\n2.23\n\n\nCombretaceae\nKenya\nC3\n−25.90\n-\n\n\nConnaraceae\nDemocratic Republic of the Congo\nC3\n−34.50\n-\n\n\nCucurbitaceae\nKenya\nC3\n−27.50\n-\n\n\nCyperaceae\nMongolia\nC3\n−27.60\n-\n\n\nEbenaceae\nDemocratic Republic of the Congo\nC3\n−32.10\n-\n\n\nEuphorbiaceae\nDemocratic Republic of the Congo\nC3\n−33.40\n-\n\n\nEuphorbiaceae\nKenya\nC3\n−27.25\n0.21\n\n\nFlacourtiaceae\nDemocratic Republic of the Congo\nC3\n−34.85\n0.78\n\n\nFlacourtiaceae\nKenya\nC3\n−26.30\n-\n\n\nGramineae\nArgentina\nC3\n−27.62\n1.84\n\n\nGramineae\nDemocratic Republic of the Congo\nC3\n−32.20\n-\n\n\nGramineae\nKenya\nC4\n−12.11\n1.07\n\n\nGramineae\nMongolia\nC3\n−24.82\n1.60\n\n\nLabiatae\nKenya\nC3\n−28.30\n-\n\n\nLeguminosae\nKenya\nC3\n−27.03\n1.69\n\n\nMalvaceae\nKenya\nC3\n−26.85\n1.77\n\n\nMaranthaceae\nDemocratic Republic of the Congo\nC3\n−36.35\n0.21\n\n\nPalmae\nKenya\nC3\n−25.90\n1.56\n\n\nPapilionaceae\nKenya\nC3\n−28.60\n-\n\n\nPedaliaceae\nKenya\nC3\n−28.10\n-\n\n\nRhamnaceae\nKenya\nC3\n−27.40\n1.98\n\n\nRubiaceae\nDemocratic Republic of the Congo\nC3\n−33.00\n-\n\n\nRubiaceae\nKenya\nC3\n−27.90\n-\n\n\nSalvadoraceae\nKenya\nC3\n−27.15\n1.35\n\n\nSolanaceae\nKenya\nC3\n−27.50\n0.57\n\n\nSterculiaceae\nDemocratic Republic of the Congo\nC3\n−36.00\n-\n\n\nTiliaceae\nKenya\nC3\n−27.50\n-\n\n\nUrticaceae\nDemocratic Republic of the Congo\nC3\n−34.90\n-\n\n\nUrticaceae\nKenya\nC3\n−28.20\n-\n\n\nViolaceae\nDemocratic Republic of the Congo\nC3\n−34.40\n-\n\n\n\nData source: vegetation data from the {folio} package  Families which have less than three measurements are greyed out.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication design</span>"
    ]
  },
  {
    "objectID": "02-Publication_table.html#default-table-processing-by-quarto",
    "href": "02-Publication_table.html#default-table-processing-by-quarto",
    "title": "3  Publication design",
    "section": "3.5 Default table processing by Quarto",
    "text": "3.5 Default table processing by Quarto\n\n\n\n\n\n\nTable processing in Quarto\n\n\n\nQuarto, by default, applies a Bootstrap CSS class (table-striped) to tables generated from code chunks, which introduces row stripping in HTML tables. Row stripping is not common in publications and we thus turn it off in the code chunk below (with html-table-processing: \"none\") to show how a final publication-ready table might look like.\n\n\n\n\nShow code\ntbl_publication_conditional \n\n\n\n\nTable 3.1\n\n\n\n\n\n\n  \n    \n    \n    \n    \n    \n  \n  \n    \n      Family\n      Country\n      Type\n      \n        δ13C\n      \n    \n    \n      Mean\n      SD\n    \n  \n  \n    Acanthaceae\nKenya\nC3\n−27.00\n-\n    Amaranthaceae\nKenya\nC3\n−29.90\n-\n    Asclepiadaceae\nKenya\nC3\n−28.10\n-\n    Balinitaceae\nKenya\nC3\n−28.60\n0.85\n    Bignoniaceae\nKenya\nC3\n−28.90\n-\n    Boraginaceae\nKenya\nC3\n−25.50\n0.85\n    Burseraceae\nKenya\nC3\n−28.70\n1.92\n    Caesalpiniaceae\nDemocratic Republic of the Congo\nC3\n−32.35\n1.91\n    Capparaceae\nKenya\nC3\n−27.68\n2.23\n    Combretaceae\nKenya\nC3\n−25.90\n-\n    Connaraceae\nDemocratic Republic of the Congo\nC3\n−34.50\n-\n    Cucurbitaceae\nKenya\nC3\n−27.50\n-\n    Cyperaceae\nMongolia\nC3\n−27.60\n-\n    Ebenaceae\nDemocratic Republic of the Congo\nC3\n−32.10\n-\n    Euphorbiaceae\nDemocratic Republic of the Congo\nC3\n−33.40\n-\n    Euphorbiaceae\nKenya\nC3\n−27.25\n0.21\n    Flacourtiaceae\nDemocratic Republic of the Congo\nC3\n−34.85\n0.78\n    Flacourtiaceae\nKenya\nC3\n−26.30\n-\n    Gramineae\nArgentina\nC3\n−27.62\n1.84\n    Gramineae\nDemocratic Republic of the Congo\nC3\n−32.20\n-\n    Gramineae\nKenya\nC4\n−12.11\n1.07\n    Gramineae\nMongolia\nC3\n−24.82\n1.60\n    Labiatae\nKenya\nC3\n−28.30\n-\n    Leguminosae\nKenya\nC3\n−27.03\n1.69\n    Malvaceae\nKenya\nC3\n−26.85\n1.77\n    Maranthaceae\nDemocratic Republic of the Congo\nC3\n−36.35\n0.21\n    Palmae\nKenya\nC3\n−25.90\n1.56\n    Papilionaceae\nKenya\nC3\n−28.60\n-\n    Pedaliaceae\nKenya\nC3\n−28.10\n-\n    Rhamnaceae\nKenya\nC3\n−27.40\n1.98\n    Rubiaceae\nDemocratic Republic of the Congo\nC3\n−33.00\n-\n    Rubiaceae\nKenya\nC3\n−27.90\n-\n    Salvadoraceae\nKenya\nC3\n−27.15\n1.35\n    Solanaceae\nKenya\nC3\n−27.50\n0.57\n    Sterculiaceae\nDemocratic Republic of the Congo\nC3\n−36.00\n-\n    Tiliaceae\nKenya\nC3\n−27.50\n-\n    Urticaceae\nDemocratic Republic of the Congo\nC3\n−34.90\n-\n    Urticaceae\nKenya\nC3\n−28.20\n-\n    Violaceae\nDemocratic Republic of the Congo\nC3\n−34.40\n-\n  \n  \n  \n    \n       Data source: vegetation data from the {folio} package  Families which have less than three measurements are greyed out.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Publication design</span>"
    ]
  },
  {
    "objectID": "03-Plot_table_assembly.html",
    "href": "03-Plot_table_assembly.html",
    "title": "4  {ggplot2} and {gt} assembly",
    "section": "",
    "text": "✓ All shared objects created successfully from _objects.R\n\n\nWhen creating a series of outputs, it is desirable to keep them visually unified. Is it possible to combine plots and tables in a single figure? Yes, it is - including tables produced with the {gt} package. We will only need a small trick to convert a gt table to a grob, which we can then combine with a plot created with the famous {ggplot2} package.\n\nMake a plot Here, we will create a simple violin plot to visualize the distribution of measured δ13C across countries in this data set.\n\n\n\nShow code\np_violin &lt;- ggplot(dat_vegetation, aes(x = country_label, y = delta)) +\n  geom_violin(colour = \"black\", fill = \"#005C55FF\") +\n  theme_classic() +\n  theme(\n    plot.margin = margin(0, 0, 0, 0),\n    plot.background = element_blank(),\n    panel.background = element_blank(),\n    axis.line.x = element_blank(),\n    axis.line.y = element_line(colour = \"black\", linewidth = 0.75),\n    axis.ticks.y = element_line(colour = \"black\", linewidth = 0.75),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(colour = \"black\", size = 12),\n    axis.title = element_blank(),\n    aspect.ratio = 0.75\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nWe will create a simple gt table\n\n\n\nShow code\ngt_for_plot &lt;- dat_vegetation |&gt;\n  group_by(country) |&gt;\n  summarize(\n    mean_d = mean(delta),\n    median_d = median(delta)\n  ) |&gt;\n  gt() |&gt;\n  tab_spanner(columns = contains(\"_d\"), label = md(\"&delta;^13^C\")) |&gt;\n  cols_label(\n    country = \"Country\",\n    mean_d = \"Mean\",\n    median_d = \"Median\"\n  ) |&gt;\n  # column labels and spanners in bold font face\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_labels(everything())\n  ) |&gt;\n  tab_style(\n    style = cell_text(weight = \"bold\"),\n    locations = cells_column_spanners(spanners = everything())\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\n\nδ13C\n\n\n\nMean\nMedian\n\n\n\n\nArgentina\n-27.61667\n-27.45\n\n\nDemocratic Republic of the Congo\n-34.11429\n-34.35\n\n\nKenya\n-19.80360\n-23.30\n\n\nMongolia\n-25.28333\n-24.75\n\n\n\n\n\n\n\n\nWe need to convert the gt table to a grob (required by {patchwork}), which requires a few dependencies\n\n\n\nShow code\nlibrary(magick)\nlibrary(ggplotify)\n\n\nWith a small function, we can first save the gt table as an PNG image and with help of the {ggplotify}, further conversion into a grob is possible:\n\n\nShow code\nas_grob_gt &lt;- function(x) {\n  tmp &lt;- tempfile(fileext = \".png\")\n  gtsave(x, filename = tmp)\n  img &lt;- magick::image_read(tmp)\n  \n  # Returns a ggplot grob for patchwork\n  return(ggplotify::as.grob(img)) \n}\n\n\n\nAssemble plot and table into a single figure\n\nAs mentioned above, we will use the {patchwork} package for a final plot-table assembly.\n\n\nShow code\nlibrary(patchwork)\n\n\nOnce gt table is converted to a grob\n\n\nShow code\ngt_grob_patchwork &lt;- as_grob_gt(gt_for_plot)\n\n\nwe can treat it as e.g., another ggplot2 figure and with help of {patchwork}’s syntax, control relative positions of plot and table as well as their alignment\n\n\nShow code\np_violin / gt_grob_patchwork",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>`{ggplot2}` and `{gt}` assembly</span>"
    ]
  },
  {
    "objectID": "04-Poster_design.html",
    "href": "04-Poster_design.html",
    "title": "5  Poster design",
    "section": "",
    "text": "✓ All shared objects created successfully from _objects.R\n\n\nIn other situations, we may be more creative with our table design. A well-done table can be as catchy as a figure and we can use it to get attention of our readers. In the course of this tutorial, we can think for example of a table for a scientific poster. The vegetation data contains details about countries where the δ13C measurements were done - highlighting the country’s positions in continent shapes should be the eye catcher element of our table.\nWhile working on ?tbl-publication-ready-conditional, we realized that there was a different number of measurements in different families. In this section, we will group our data to even smaller numbers of groups and we do not want to loose the detail about the number of underlying data points. We will use ggplot_image() to include a scatter plot (combined with half-violin plots to visualize the distribution of measured values even better).\nBesides combining table layout with {ggplot2} figures, we will pay attention to colours used in the various components of the table. In a real project, it may be for example organisation colours. Here, we will use a few colours from the sPBIYlGn palette from the {Redmonder} package.\nWe will start be loading the {rnaturalearth} package which - among many other details about countries - contains assignment of countries to continents and polygons for countries’ borders.\n\n\nShow code\nlibrary(rnaturalearth)\n\n\nNext, we will proceed with some pre-processing:\n1. extract labels (used as plot titles) of countries of interest (those with measurement data) as a named vector - the names are critical to match country names from dat_vegetation (and data frames derived from it) with country polygons from {rnaturalearth} (here, loaded as world_data)\n2. obtain countries data\n3. and subset them only to countries from the vegetation data set\n\n\nShow code\n# 1. Store country labels as a named vector\ncountry_labels &lt;- sort(unique(dat_vegetation$country_label))\nnames(country_labels) &lt;- sort(unique(dat_vegetation$country))\n\n# 2. Get countries data\nworld_data &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n# glimpse(world_data)\n\n# 3. Subset countries data only for countries of interest\n\n# Countries in the data\nvegetation_countries &lt;- unique(dat_vegetation$country)\nvegetation_continents &lt;- world_data[world_data$name_en %in% vegetation_countries, ]$continent\n\n# Get their continents\nvegetation_sf_continents &lt;- world_data[world_data$continent %in% vegetation_continents, ]\n\n# Subset the sf world data for countries of interest\nvegetation_sf_countries &lt;- world_data[world_data$name_en %in% vegetation_countries, ]\n\n\n\ndefine a custom font using {showtext} package\n\n\n\nShow code\nlibrary(showtext)\n\n# Font of choice\nfont_add_google(name = \"Open Sans\", family = \"open sans\")\n# showtext_auto is needed to display the font\nshowtext_auto()\n\n\n\n\n\n\n\n\nCustom font for table and embeded figures\n\n\n\nIt is a good idea to define the custom font before proceeding with generation of the tables and embedded figures. This will allow us to reference to it when we create these building blocks.\n\n\nWe will actually produce two figures for each country & plant type (either C3 or c 4) and as a next step, we will therefore prepare the code for both figures. Because we will use the {gt}’s text_transform() function to embed ggplot2 figures into a table, we will wrap the plotting code into functions.\nCountry plots\nThis function takes a country name is argument and uses it to generate a map based on the vegetation_sf_continents object prepared earlier (it basically needs the country and continent polygons).\n\n\nShow code\n# Functions inputs are:\n# country - character vector with name of the country to be highlighted\n\n# Function relies on:\n# vegetation_sf_countries - a combined sf + data.frame object with country coordinates and details; based on data from the {rnaturalearth} package\n\nPlotCountry &lt;- function(target_country) {\n  # Get coordinates of the continent where target country is located\n  target_continent &lt;- vegetation_sf_countries[vegetation_sf_countries$name_en == target_country, ]$continent\n  # Country label will be used a plot's title\n  country_label &lt;- country_labels[names(country_labels) == target_country]\n\n  p_cont &lt;- ggplot() +\n    # entire continent\n    geom_sf(data = vegetation_sf_continents[vegetation_sf_continents$continent == target_continent, ], fill = \"white\") +\n    # highlight target country\n    geom_sf(data = vegetation_sf_countries[vegetation_sf_countries$name_en == target_country, ], fill = \"#1F6E5EFF\") +\n    labs(title = country_label) +\n    # removes all grids, axes, etc.\n    theme_void() +\n    theme(plot.margin = margin(0, 0, 0, 0),\n          plot.title = element_text(size = 32, hjust = 0.5),\n          text = element_text(family = \"open sans\"))\n  \n  return(p_cont)\n}\n\n\nLet’s give the function try with Kenya as an example:\n\n\nShow code\nPlotCountry(\"Kenya\")\n\n\n\n\n\n\n\n\n\nObservations and density\nThe second figure should summarize observations for each country and type of plant. We will include all measurements as individual data points to give an impression about the size of each group. We will use a devoted geom_jitter() to give a little bit of random variation to the points, which is solely for visual purposes. (Note: geom_point(position = \"jitter\") would do the job as well.)\nWe will combine the scatter plot with half violin plot for an impression about distribution of the measure values. We will include y-axis to help our readers with interpretation of the plots. Nonetheless, we want to ensure that all figures will share the same axis limits to avoid any false interpretations.\n\n\nShow code\n### y-axis limits\n# \"nice\" number are preferred and thus the use of modulo\n# keep in mind that the measure values are negative!\ny_min &lt;- (round(min(dat_vegetation$delta) %% 10, 0) * 10) * -1\ny_max &lt;- (round(max(dat_vegetation$delta) %% 10, 0) * 10) * -1\n\n### Function\nPlotHalfViolins &lt;- function(data_to_plot) {\n  p_halfv &lt;- ggplot(data_to_plot, aes(x = country, y = delta)) +\n    geom_violinhalf(colour = \"#005C55FF\", fill = \"#005C55FF\", position = position_nudge(x = 0.15, y = 0)) +\n    geom_jitter(aes(fill = type), colour = \"#005C55FF\", alpha = 0.8, width = 0.05) +\n    scale_y_continuous(breaks = c(-10, -20, -30, -40)) +\n    # set limits of the y axis\n    coord_cartesian(ylim = c(y_min, y_max)) +\n    theme_classic() +\n    theme(\n      plot.margin = margin(0, 0, 0, 0),\n      plot.background = element_blank(),\n      panel.background = element_blank(),\n      axis.line.x = element_blank(),\n      axis.line.y = element_line(colour = \"black\", linewidth = 1),\n      axis.ticks.y = element_line(colour = \"black\", linewidth = 1),\n      axis.ticks.x = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(colour = \"black\", size = 16),\n      axis.title = element_blank(),\n      aspect.ratio = 2,\n      legend.position = \"none\"\n    )\n\n  return(p_halfv)\n}\n\n\nAgain, let’s see how the output of this function looks like:\n\n\nShow code\nPlotHalfViolins(dat_vegetation[dat_vegetation$country == \"Kenya\", ])\n\n\n\n\n\n\n\n\n\nLet’s start with a very basic table - with all required building blocks but not much of customized design.\nFirst of all, we will create a little summary table. It will be the basic scaffold to add the {ggplot2} components to. We will also calculate mean δ13C for each group of plants by their type AND country.\n\n\nShow code\nsummarized_tbl_input &lt;- dat_vegetation |&gt;\n  group_by(country, type) |&gt;\n  summarize(mean_d = mean(delta)) |&gt;\n  arrange(country)\n\n\nNext, we will replace the country names with respective plots. We will use the ggplot_image() function in combination with text_transform() to replace a text (here, country name) with a ggplot2 graphic created with our custom function.\n\n\nShow code\nsummarized_tbl_input |&gt; \n  gt() |&gt;\n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  )\n\n\n\n\nTable 5.1\n\n\n\n\n\n\n  \n    \n      type\n      mean_d\n    \n  \n  \n    \n      \n    \n    C&lt;sub&gt;3&lt;/sub&gt;\n-27.61667\n    \n      \n    \n    C&lt;sub&gt;3&lt;/sub&gt;\n-34.11429\n    \n      \n    \n    C&lt;sub&gt;3&lt;/sub&gt;\n-27.36429\n    C&lt;sub&gt;4&lt;/sub&gt;\n-12.10545\n    \n      \n    \n    C&lt;sub&gt;3&lt;/sub&gt;\n-25.28333\n  \n  \n  \n\n\n\n\n\n\n\ntext_transform() has done its job but the resulting table is not visually quite appealing. As we will work on improving it, we will first of all handle the “row groups”. For most of the countries, there is only a single group of observations and we included country names in plot titles already. We can move row group labels to columns for a much nicer table\n\n\nShow code\nsummarized_tbl_input |&gt; \n  gt(\n    row_group_as_column = T,\n  ) |&gt;\n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  )\n\n\n\n\nTable 5.2\n\n\n\n\n\n\n  \n    \n      \n      type\n      mean_d\n    \n  \n  \n    \nC&lt;sub&gt;3&lt;/sub&gt;\n-27.61667\n    \nC&lt;sub&gt;3&lt;/sub&gt;\n-34.11429\n    \nC&lt;sub&gt;3&lt;/sub&gt;\n-27.36429\n    C&lt;sub&gt;4&lt;/sub&gt;\n-12.10545\n    \nC&lt;sub&gt;3&lt;/sub&gt;\n-25.28333\n  \n  \n  \n\n\n\n\n\n\n\nLuckily, the gt() has a process_md argument which makes handling of subscript a super easy task:\n\n\nShow code\nsummarized_tbl_input |&gt; \n  gt(\n    rowname_col = \"type\",\n    row_group_as_column = T,\n    process_md = T\n  ) |&gt; \n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  )\n\n\n\n\nTable 5.3\n\n\n\n\n\n\n  \n    \n      \n      mean_d\n    \n  \n  \n    \nC3\n-27.61667\n    \nC3\n-34.11429\n    \nC3\n-27.36429\n    C4\n-12.10545\n    \nC3\n-25.28333\n  \n  \n  \n\n\n\n\n\n\n\nNow, it’s time to include the other figure, a combined jitter and half violin plot. Again, we can use text_transform() alongside with ggplot_image(). However, we need to “provide a new column” to place the graphic into. One option is the mutate() function from {dplyr} package. We can apply it just before passing our summarized_tbl_input into the gt() function without any need to really modify this input data.\n\n\nShow code\ntbl_with_plots &lt;- summarized_tbl_input |&gt; \n  # new column for violin + scatter plot assembly\n  mutate(violin_plot = \"violin\") |&gt; \n  gt(\n    rowname_col = \"type\",\n    row_group_as_column = T,\n    process_md = T\n  ) |&gt;\n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  ) |&gt;\n  # half violin + dot plots\n  text_transform(\n    locations = cells_body(columns = \"violin_plot\"),\n    fn = function(x) {\n      # Use `map2` to iterate over the column and the row index simultaneously\n      map2(x, 1:length(x), function(col_value, i) {\n        # Get the row-specific country and type from the summarized data\n        target_country &lt;- summarized_tbl_input$country[i]\n        target_type &lt;- summarized_tbl_input$type[i]\n\n        # Filter the original data and create the plot\n        data_to_plot &lt;- dat_vegetation |&gt;\n          filter(country == !!target_country, type == !!target_type)\n\n        PlotHalfViolins(data_to_plot) |&gt;\n          ggplot_image(height = px(200)) |&gt;\n          html()\n      })\n    }\n  )\n\ntbl_with_plots\n\n\n\n\nTable 5.4\n\n\n\n\n\n\n  \n    \n      \n      mean_d\n      violin_plot\n    \n  \n  \n    \nC3\n-27.61667\n\n    \nC3\n-34.11429\n\n    \nC3\n-27.36429\n\n    C4\n-12.10545\n\n    \nC3\n-25.28333\n\n  \n  \n  \n\n\n\n\n\n\n\nWith that, our table’s content is complete and we can try to improve it’s overall design. There is a lot to do: nicer column labels (cols_label()) and formatting of numerical values (fmt_number()), alignment of column headers (cols_align()) and cell content (tab_style() targeting cell_text())\n\n\nShow code\ntbl_with_plots |&gt; \n  fmt_number(columns = \"mean_d\", decimals = 2) |&gt;\n  tab_spanner(columns = contains(c(\"mean\", \"violin\")), label = md(\"&delta;^13^C\")) |&gt;\n  cols_label(\n    type = \"Type\",\n    mean_d = \"Mean\",\n    violin_plot = \"Measurements\"\n  ) |&gt;\n  cols_align(align = \"center\", columns = everything()) |&gt; \n  tab_style(\n    style = list(\n      cell_text(align = \"center\")\n    ),\n    locations = cells_body(columns = everything())\n  )\n\n\n\n\nTable 5.5\n\n\n\n\n\n\n  \n    \n      \n      \n        δ13C\n      \n    \n    \n      Mean\n      Measurements\n    \n  \n  \n    \nC3\n−27.62\n\n    \nC3\n−34.11\n\n    \nC3\n−27.36\n\n    C4\n−12.11\n\n    \nC3\n−25.28\n\n  \n  \n  \n\n\n\n\n\n\n\nThis is not too bad - but what about setting a nice background colour and adjusting cell borders accordingly? With predefined arguments of tab_options() and a little bit of CSS, we can do a lot with relatively little of a code. Even a gradient background!\n\n\nShow code\ntbl_with_plots_gradient &lt;- summarized_tbl_input |&gt; \n  mutate(violin_plot = \"Violin\") |&gt; \n  gt(\n    id = \"countries_tbl\",\n    rowname_col = \"type\",\n    row_group_as_column = T,\n    process_md = T\n  ) |&gt; \n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  ) |&gt; \n  # half violin + dot plots\n  text_transform(\n    locations = cells_body(columns = \"violin_plot\"),\n    fn = function(x) {\n      # Use `map2` to iterate over the column and the row index simultaneously\n      map2(x, 1:length(x), function(col_value, i) {\n        # Get the row-specific country and type from the summarized data\n        target_country &lt;- summarized_tbl_input$country[i]\n        target_type &lt;- summarized_tbl_input$type[i]\n\n        # Filter the original data and create the plot\n        data_to_plot &lt;- dat_vegetation |&gt;\n          filter(country == !!target_country, type == !!target_type)\n\n        PlotHalfViolins(data_to_plot) |&gt;\n          ggplot_image(height = px(200)) |&gt;\n          html()\n      })\n    }\n  ) |&gt; \n  fmt_number(columns = \"mean_d\", decimals = 2) |&gt;\n  tab_spanner(columns = contains(c(\"mean\", \"violin\")), label = md(\"&delta;^13^C\")) |&gt;\n  cols_label(\n    type = \"Type\",\n    mean_d = \"Mean\",\n    violin_plot = \"Measurements\"\n  ) |&gt;\n  cols_align(align = \"center\", columns = everything()) |&gt; \n  tab_style(\n    style = list(\n      cell_text(align = \"center\")\n    ),\n    locations = cells_body(columns = everything())\n  ) |&gt; \n  tab_options(\n    table.width = px(600),\n    table.font.names = \"open sans\",\n    heading.align = \"center\",\n    column_labels.border.top.color = \"white\",\n    column_labels.border.bottom.color = \"white\",\n    heading.border.bottom.color = \"white\",\n    table_body.border.top.color = \"white\",\n    table_body.border.bottom.color = \"white\",\n    table_body.hlines.color = \"white\",\n    footnotes.border.bottom.color = \"white\"\n  ) |&gt;\n  cols_width(\n    type ~ px(100),\n    mean_d ~ px(100)\n  ) |&gt; \n  opt_css(css =\"\n    #countries_tbl .gt_table {\n      background: linear-gradient(180deg, #7DA37BFF, #DBD797);\n    }\n    \n    #countries_tbl .gt_col_heading, #countries_tbl .gt_column_spanner_outer, #countries_tbl .gt_row.gt_center.gt_stub, #countries_tbl .gt_row.gt_center.gt_stub_row_group, #countries_tbl .gt_row.gt_left.gt_stub, #countries_tbl .gt_row.gt_left.gt_stub_row_group {\n      background: transparent; border-right-style: none; vertical-align: middle;\n    }\")\n\ntbl_with_plots_gradient\n\n\n\n\n\n\n\n\n\n\nδ13C\n\n\n\nMean\nMeasurements\n\n\n\n\n\nC3\n−27.62\n\n\n\n\nC3\n−34.11\n\n\n\n\nC3\n−27.36\n\n\n\nC4\n−12.11\n\n\n\n\nC3\n−25.28\n\n\n\n\n\n\n\n\nIn case we would use the table as a stand-alone graphic, it is a good idea to include the data source and a little bit of detail about the data. We can do so with tab_footnote() (our predefined footnote label will come handy here) and tab_header.\n\n\nShow code\ntbl_with_plots_gradient |&gt; \n  tab_header(md(\"&delta;^13^C is a ratio between ^12^C and ^13^C isotopes; photosynthetically more efficient plant species show less negative values\")) |&gt; \n  tab_footnote(md(folio_footnote)) |&gt; \n  tab_options(heading.title.font.size = 12,\n              footnotes.font.size = 12)\n\n\n\n\n\n\n\n\nδ13C is a ratio between 12C and 13C isotopes; photosynthetically more efficient plant species show less negative values\n\n\n\n\nδ13C\n\n\n\nMean\nMeasurements\n\n\n\n\n\nC3\n−27.62\n\n\n\n\nC3\n−34.11\n\n\n\n\nC3\n−27.36\n\n\n\nC4\n−12.11\n\n\n\n\nC3\n−25.28\n\n\n\n\nData source: vegetation data from the {folio} package",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Poster design</span>"
    ]
  },
  {
    "objectID": "05-Interactivate_table.html",
    "href": "05-Interactivate_table.html",
    "title": "6  Interactive table",
    "section": "",
    "text": "✓ All shared objects created successfully from _objects.R\n\n\nA digital presentation of results offers more options to be creative, including interactive content (e.g., for for an organization or private website). We will thus transform the poster-ready ?tbl-advanced-design-annotated into an interactive one. The interactive component will be the plots - we will display species names on hover over the individual data points. We will use the {ggiraph} package to achieve this.\n\n\nShow code\nlibrary(ggiraph)\n\n\nWe will keep the chosen colour scheme and a visualization combining distribution with individual data points. We will however move from a half-violin plot to a standard violin plot and overlay the measurements (geom_gitter()) on top of it. This will give us more room to separate the data points from each other and our reader easier access to the species names.\nThe ggiraph-book is an excellent resource about the package and I am thus on purpose cutting this part short. In brief, we use the _interactive versions of common {ggplot2} geometries to add interactivity to a plot and display the result using the girafe() function. For fine tuning the resulting visualization, we can use CSS.\nLet’s use a subset of the vegetation data (C4 species of Kenya) while working on the code for an interactive scatter plot overlayed on a violin plot.\n\n\nShow code\ndata_to_plot &lt;- dat_vegetation |&gt;\n  filter(country == \"Kenya\", type == \"C&lt;sub&gt;4&lt;/sub&gt;\")\n\np_violin &lt;- ggplot(data_to_plot, aes(x = country, y = delta)) +\n  geom_violin(colour = \"#005C55FF\", fill = \"#005C55FF\", alpha = 0.25) +\n  geom_jitter_interactive(aes(tooltip = species), shape = 21, size = 3, fill = \"#005C55FF\", colour = \"white\") +\n  scale_y_continuous(breaks = c(-10, -20, -30, -40)) +\n  coord_cartesian(ylim = c(-45, -10)) +\n  theme_classic() +\n  theme(\n    plot.margin = margin(0, 0, 0, 0),\n    panel.background = element_blank(),\n    plot.background = element_blank(),\n    axis.line.x = element_blank(),\n    axis.line.y = element_line(colour = \"black\", linewidth = 1),\n    axis.ticks.y = element_line(colour = \"black\", linewidth = 1),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(colour = \"black\", size = 16),\n    axis.title = element_blank(),\n    aspect.ratio = 3,\n    legend.position = \"none\"\n  )\n\ngirafe(\n  ggobj = p_violin,\n  height_svg = 2,\n  width_svg = 2,\n  options = \"css = background-color: transparent;\"\n) |&gt;\n  girafe_options(\n    opts_tooltip(css = \"background-color: white; text-color: black; font-style: italic;\")\n  )\n\n\n\n\n\n\n\n\nFigure 6.1\n\n\n\n\nOnce happy with the outcome, we again wrap the code in a function so that we can use it later with text_transform() as we have done in Chapter 5 previously. However, we will be displaying an HTML content (an htmlwidget) this time. We can dealt with this by saving the ggraph plot into a temporary HTML file (htmltools::save_html()) which we can then “display” using base R readLines() function.\n\n\nShow code\nlibrary(htmltools)\n\n\n\n\nShow code\nPlotGirafeViolins &lt;- function(data_to_plot){\n  p_violin &lt;- ggplot(data_to_plot, aes(x = country, y = delta)) +\n    geom_violin(colour = \"#005C55FF\", fill = \"#005C55FF\", alpha = 0.25) +\n    geom_jitter_interactive(aes(tooltip = species), shape = 21, size = 3, fill = \"#005C55FF\", colour = \"white\") +\n    scale_y_continuous(breaks = c(-10, -20, -30, -40)) +\n    coord_cartesian(ylim = c(-45, -10)) +\n    theme_classic() +\n    theme(\n      plot.margin = margin(0, 0, 0, 0),\n      panel.background = element_blank(),\n      plot.background = element_blank(),\n      axis.line.x = element_blank(),\n      axis.line.y = element_line(colour = \"black\", linewidth = 1),\n      axis.ticks.y = element_line(colour = \"black\", linewidth = 1),\n      axis.ticks.x = element_blank(),\n      axis.text.x = element_blank(),\n      axis.text.y = element_text(colour = \"black\", size = 16),\n      axis.title = element_blank(),\n      aspect.ratio = 3,\n      legend.position = \"none\"\n    )\n\n  g_violin &lt;- girafe(\n    ggobj = p_violin,\n    width_svg = 1,\n    height_svg = 1.5,\n    options = \"css = background-color: transparent;\"\n  ) |&gt;\n    girafe_options(\n      opts_tooltip(css = \"background-color: white; text-color: black; font-style: italic;\")\n    )\n\n  # Save the ggiraph plot to a temporary HTML file\n  tmpfile &lt;- tempfile(fileext = \".html\")\n  save_html(g_violin, tmpfile)\n\n  # Read the content of the HTML file as a single character string\n  plot_html_content &lt;- paste(readLines(tmpfile, warn = FALSE), collapse = \"\\n\")\n\n  return(plot_html_content)\n}\n\n\nIn the overall table layout, we can apply all what we have learned before (grouping of rows, use of the process_md argument, modifying column labels, etc.), but the text_transform() call will become a little more complicated. First of all, we use summarized data summarized_tbl_input as a basis for the resulting table (input for the (gt() function). At the same time, we need access to the pre-processed, full-length data set (dat_vegetation) which is the input for our custom PlotGirafeViolins() function.\nTo generate the correct violin and scatter plot for each row of the resulting table, we:\n\nuse lapply() to iterate over rows of the “summarized table”\n\nwe keep track with the help of index i - this helps us to look up the corresponding country and type values from the dat_vegetation data frame\n\nthe filtered data is input for our PlotGirafeViolins() function\n\nwe send the output into html() to ensure proper rendering in the final table\n\n\n\nShow code\ntext_transform(\n  locations = cells_body(columns = \"violin_plot\"),\n  fn = function(x) {\n    lapply(1:length(x), function(i) {\n      target_country &lt;- summarized_tbl_input$country[i]\n      target_type &lt;- summarized_tbl_input$type[i]\n\n      data_to_plot &lt;- dat_vegetation |&gt;\n      filter(country == target_country, type == target_type)\n\n      # Call the modified plotting function and wrap in html()\n      PlotGirafeViolins(data_to_plot) |&gt;\n        html()\n    })\n  }\n)\n\n\nAnd integrated with the remaining code, we get a table with known design and components but interactive charts:\n\n\nShow code\nsummarized_tbl_input |&gt; \n  mutate(violin_plot = \"\") |&gt;\n  gt(\n    id = \"countries_tbl\",\n    rowname_col = \"type\",\n    groupname_col = \"country\",\n    row_group_as_column = T,\n    process_md = T\n  ) |&gt;\n  fmt_markdown(columns = \"type\") |&gt;\n  fmt_number(columns = \"mean_d\", decimals = 2) |&gt;\n  tab_header(md(\"&delta;^13^C is a ratio between ^12^C and ^13^C isotopes; photosynthetically more efficient plant species show less negative values\")) |&gt; \n  tab_spanner(columns = contains(c(\"mean\", \"violin\")), label = md(\"&delta;^13^C\")) |&gt;\n  cols_label(\n    type = \"Type\",\n    mean_d = \"Mean\",\n    violin_plot = \"Measurements\"\n  ) |&gt;\n  cols_align(align = \"center\", columns = everything()) |&gt; \n  # country maps\n  text_transform(\n    locations = cells_row_groups(),\n    fn = function(x) {\n      lapply(x, function(y) {\n        html(PlotCountry(y) |&gt; ggplot_image(height = px(150), aspect_ratio = 1))\n      })\n    }\n  ) |&gt; \n  # text_transform for html\n  text_transform(\n    locations = cells_body(columns = \"violin_plot\"),\n    fn = function(x) {\n      lapply(1:length(x), function(i) {\n        target_country &lt;- summarized_tbl_input$country[i]\n        target_type &lt;- summarized_tbl_input$type[i]\n\n        data_to_plot &lt;- dat_vegetation |&gt;\n          filter(country == target_country, type == target_type)\n\n        # Call the modified plotting function and wrap in html()\n        PlotGirafeViolins(data_to_plot) |&gt;\n          html()\n      })\n    }\n  ) |&gt; \n  tab_style(\n    style = list(\n      cell_text(align = \"center\")\n    ),\n    locations = cells_body(columns = everything())\n  ) |&gt;\n  tab_options(\n    table.width = px(500),\n    table.font.names = \"open sans\",\n    heading.align = \"center\",\n    column_labels.border.top.color = \"white\",\n    column_labels.border.bottom.color = \"white\",\n    heading.border.bottom.color = \"white\",\n    table_body.border.top.color = \"white\",\n    table_body.border.bottom.color = \"white\",\n    table_body.hlines.color = \"white\",\n    footnotes.border.bottom.color = \"white\"\n  ) |&gt;\n  cols_width(\n    type ~ px(100),\n    mean_d ~ px(100)\n  ) |&gt; \n  opt_css(css =\"\n    #countries_tbl .gt_table {\n      background: linear-gradient(180deg, #3F7F68, #DBD797);\n    }\n    \n    #countries_tbl .gt_col_heading, #countries_tbl .gt_column_spanner_outer, #countries_tbl .gt_row.gt_center, #countries_tbl .gt_row.gt_center.gt_stub_row_group, #countries_tbl .gt_row.gt_left.gt_stub, #countries_tbl .gt_row.gt_left.gt_stub_row_group {\n      background: transparent; border-right-style: none; vertical-align: middle;\n    }\n    \n    #countries-tbl .girafe_container, #countries-tbl .girafe_container_std, #countries_tbl .ggiraph-svg, #countries-tbl .ggiraph-svg-bg {\n      background: transparent;\n    }\n    \n    #countries-tbl .gt_row_group_first{\n      background: transparent;\n    }\") |&gt;\n  tab_footnote(md(folio_footnote))\n\n\n\n\n\n\n\n\nδ13C is a ratio between 12C and 13C isotopes; photosynthetically more efficient plant species show less negative values\n\n\n\n\nδ13C\n\n\n\nMean\nMeasurements\n\n\n\n\n\nC3\n−27.62\n\n\n\n\n\n\n\nC3\n−34.11\n\n\n\n\n\n\n\nC3\n−27.36\n\n\n\n\n\n\nC4\n−12.11\n\n\n\n\n\n\n\nC3\n−25.28\n\n\n\n\n\n\n\nData source: vegetation data from the {folio} package\n\n\n\n\n\n\n\n\nShow code\n# final_html_output &lt;- as_raw_html(gt_giraph,\n#   inline_css = TRUE\n# )",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Interactive table</span>"
    ]
  },
  {
    "objectID": "06-Appendix.html",
    "href": "06-Appendix.html",
    "title": "7  Appendix: Creation of a supplementary table",
    "section": "",
    "text": "✓ All shared objects created successfully from _objects.R\n\n\nDuring data analysis for a publication (and other scientific outputs), we may want to share some of the intermediary outputs we have generated - for example, some summarized data may provided as a supplementary material with our publication. We do not need to start from scratch - we simply proceed further with our project. There are probably multiple ways to achieve the goal of this section, we will use {openxlsx} package.\n\n\nShow code\nlibrary(openxlsx2)\n\n\n\nWe, fill create a new workbook and add a new sheet with defined name to it.\n\n\n\nShow code\nwbook &lt;- wb_workbook()\n\nwbook$add_worksheet(\"Table S1\")\n\n\n\nWe will populate it with data. Before doing so, we will modify the input data frame a bit - for example, change column names and remove the HTML syntax fro the type column. We can also define number of decimal places.\n\n\n\nShow code\nexport_veg_summarized &lt;- veg_summarized |&gt;\n  mutate(type = gsub(\"&lt;sub&gt;|&lt;/sub&gt;\", \"\", type))\n\nexport_veg_summarized &lt;- export_veg_summarized |&gt;\n  rename(\n    \"mean delta\" = mean_d,\n    \"SD delta\" = sd_d,\n    \"N measurements\" = n_plants\n  )\n\nwbook &lt;- wbook$add_numfmt(\n  sheet = 1,\n  dims = wb_dims(\n    # Target all rows from Row 2 (data) to the end\n    rows = 2:(nrow(export_veg_summarized) + 1),\n    cols = 5:6\n  ),\n  # Use the standard Excel number format for two decimal places\n  numfmt = \"0.000\"\n)\n\nwbook$add_data(\"Table S1\", export_veg_summarized)\n\n\n\nWe will introduce a minimal formatting to the data in workbook: column headers in bold and family names in italics.\n\n\n\nShow code\nwbook &lt;- wbook$add_font(dims = wb_dims(rows = 1, cols = 1:ncol(export_veg_summarized)), bold = T)\n\nwbook$add_font(dims = wb_dims(rows = 2:(nrow(export_veg_summarized) + 1), cols = 1), italic = T)\n\n\n\nFinally, we can export the workbook into an XLSX file.\n\n\n\nShow code\ndir.create(\"outputs\")\n\nwb_save(wbook, file = \"outputs/Supplementary_data.xlsx\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Appendix: Creation of a supplementary table</span>"
    ]
  },
  {
    "objectID": "07-Resources.html",
    "href": "07-Resources.html",
    "title": "8  Resources",
    "section": "",
    "text": "Besides ggiraph-book, the openxlsx2 book and gt’s documentation, excelt and very helpful resources were:\n\nR for the Rest of Us: How to Create Your Own Table Theme with the gt Package\n\nAlbert Rapp’s Creating beautiful tables in R with {gt}, particularly chapter 2.6 and chapter 4.1.1\n\nYan Holtz’s Color Palette Finder - I picked colours from the sPBIYlGn colour palette\n\nGoogle Gemini to troubleshoot embedding of ggiraph objects into a gt table",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Resources</span>"
    ]
  }
]